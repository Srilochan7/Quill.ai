# from fastapi import FastAPI, UploadFile, File, HTTPException
# from fastapi.middleware.cors import CORSMiddleware
# from pydantic import BaseModel
# import uuid
# from pdf_parser import extract_text
# from vector_store import create_vectorstore
# from chat_engine import ask_question

# app = FastAPI()

# # CORS for React frontend
# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# class ChatRequest(BaseModel):
#     session_id: str
#     question: str

# @app.post("/upload")
# async def upload_pdf(file: UploadFile = File(...)):
#     """Upload PDF and get session ID"""
#     if not file.filename.lower().endswith('.pdf'):
#         raise HTTPException(status_code=400, detail="Only PDF files allowed")
    
#     session_id = str(uuid.uuid4())
    
#     try:
#         file_content = await file.read()
#         text = extract_text(file_content)
        
#         if not text.strip():
#             raise HTTPException(status_code=400, detail="Could not extract text from PDF")
        
#         create_vectorstore(session_id, text)
#         return {"session_id": session_id}
        
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))

# @app.post("/chat")
# async def chat(request: ChatRequest):
#     """Ask question about uploaded PDF"""
#     try:
#         answer = ask_question(request.session_id, request.question)
#         return {"answer": answer}
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))

# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8000)




import uvicorn
import uuid
import time
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# --- Dummy Implementations (Replace with your actual logic later) ---
# This helps isolate the problem. If the app works with these dummies,
# the error is inside your original implementation of these functions.

def extract_text_dummy(file_content: bytes) -> str:
    """
    Dummy function to simulate text extraction from a PDF.
    """
    print(f"DUMMY: 'Extracting' text from a file of {len(file_content)} bytes.")
    # In a real scenario, you'd use a library like PyMuPDF or pdfplumber
    return "This is the simulated extracted text from the PDF. It contains various details about the document's content, which will be used to answer questions."

def create_vectorstore_dummy(session_id: str, text: str):
    """
    Dummy function to simulate creating a vector store.
    """
    print(f"DUMMY: Creating vector store for session_id: {session_id} with text of length {len(text)}.")
    # In a real scenario, you'd use libraries like LangChain, FAISS, ChromaDB, etc.
    time.sleep(1) # Simulate some processing time
    print(f"DUMMY: Vector store for {session_id} created successfully.")
    return

def ask_question_dummy(session_id: str, question: str) -> str:
    """
    Dummy function to simulate asking a question to the chat engine.
    """
    print(f"DUMMY: Answering question '{question}' for session_id: {session_id}.")
    # In a real scenario, you'd retrieve the vector store and query an LLM.
    time.sleep(1.5) # Simulate LLM thinking time
    return f"This is a dummy answer from the AI regarding '{question}'. The actual answer would be generated by retrieving relevant context from the document you uploaded."

# --- FastAPI Application ---

app = FastAPI(
    title="ChatWithPDF API",
    description="API for uploading a PDF and chatting with it.",
    version="1.0.0",
)

# CORS for React frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

class ChatRequest(BaseModel):
    session_id: str
    question: str

@app.post("/upload")
async def upload_pdf(file: UploadFile = File(...)):
    """
    Uploads a PDF, extracts text, creates a vector store, and returns a session ID.
    """
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(status_code=400, detail="Only PDF files are allowed.")
    
    session_id = str(uuid.uuid4())
    
    try:
        # We read the file content into memory
        file_content = await file.read()
        
        # Use the dummy text extraction function
        text = extract_text_dummy(file_content)
        
        if not text or not text.strip():
            raise HTTPException(status_code=400, detail="Could not extract text from the PDF or the PDF is empty.")
        
        # Use the dummy vector store creation function
        create_vectorstore_dummy(session_id, text)
        
        return {"session_id": session_id, "detail": "File uploaded successfully."}
        
    except Exception as e:
        # This will now catch any unexpected errors from your functions
        print(f"An error occurred during upload: {e}")
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred on the server: {e}")

@app.post("/chat")
async def chat(request: ChatRequest):
    """
    Asks a question based on the session_id of a previously uploaded PDF.
    """
    try:
        # Use the dummy question answering function
        answer = ask_question_dummy(request.session_id, request.question)
        return {"answer": answer}
    except Exception as e:
        print(f"An error occurred during chat: {e}")
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred on the server: {e}")

# This block allows you to run the server directly from the script
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)